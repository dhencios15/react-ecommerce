{"ast":null,"code":"var _jsxFileName = \"D:\\\\GITHUB\\\\react-ecommerce\\\\client\\\\src\\\\components\\\\SignIn\\\\SignIn.js\";\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers';\nimport './SignIn.style.scss';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/userActions';\nimport schema from '../../helpers/Input-Validation';\nimport FormInput from '../FormInput';\nimport CustomButton from '../CustomButton';\n\nconst SignIn = () => {\n  var _errors$email, _errors$password;\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema.SignInSchema),\n    mode: 'onBlur'\n  });\n\n  const onSubmit = async (data, e) => {\n    dispatch(emailSignInStart(data));\n    e.target.reset();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    register: register,\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    register: register,\n    label: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, \"SIGN IN\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: () => dispatch(googleSignInStart()),\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"Sign in with Google\"))));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["D:/GITHUB/react-ecommerce/client/src/components/SignIn/SignIn.js"],"names":["React","useDispatch","useForm","yupResolver","googleSignInStart","emailSignInStart","schema","FormInput","CustomButton","SignIn","dispatch","register","handleSubmit","errors","resolver","SignInSchema","mode","onSubmit","data","e","target","reset","color","email","message","password"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAO,qBAAP;AACA,SACEC,iBADF,EAEEC,gBAFF,QAGO,8BAHP;AAKA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAqCX,OAAO,CAAC;AACjDY,IAAAA,QAAQ,EAAEX,WAAW,CAACG,MAAM,CAACS,YAAR,CAD4B;AAEjDC,IAAAA,IAAI,EAAE;AAF2C,GAAD,CAAlD;;AAKA,QAAMC,QAAQ,GAAG,OAAOC,IAAP,EAAaC,CAAb,KAAmB;AAClCT,IAAAA,QAAQ,CAACL,gBAAgB,CAACa,IAAD,CAAjB,CAAR;AACAC,IAAAA,CAAC,CAACC,MAAF,CAASC,KAAT;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFF,eAIE;AAAM,IAAA,QAAQ,EAAET,YAAY,CAACK,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,QAAQ,EAAEN,QAHZ;AAIE,IAAA,KAAK,EAAC,OAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AAAG,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA6BT,MAAM,CAACU,KAApC,kDAA6B,cAAcC,OAA3C,CAPF,eASE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,QAAQ,EAAEb,QAHZ;AAIE,IAAA,KAAK,EAAC,UAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAeE;AAAG,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA6BT,MAAM,CAACY,QAApC,qDAA6B,iBAAiBD,OAA9C,CAfF,eAiBE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,MAAMd,QAAQ,CAACN,iBAAiB,EAAlB,CAFzB;AAGE,IAAA,cAAc,MAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CAjBF,CAJF,CADF;AAmCD,CA/CD;;AAiDA,eAAeK,MAAf","sourcesContent":["import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers';\r\n\r\nimport './SignIn.style.scss';\r\nimport {\r\n  googleSignInStart,\r\n  emailSignInStart,\r\n} from '../../redux/user/userActions';\r\n\r\nimport schema from '../../helpers/Input-Validation';\r\nimport FormInput from '../FormInput';\r\nimport CustomButton from '../CustomButton';\r\n\r\nconst SignIn = () => {\r\n  const dispatch = useDispatch();\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema.SignInSchema),\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const onSubmit = async (data, e) => {\r\n    dispatch(emailSignInStart(data));\r\n    e.target.reset();\r\n  };\r\n\r\n  return (\r\n    <div className='sign-in'>\r\n      <h2>I already have an account</h2>\r\n      <span>Sign in with your email and password</span>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <FormInput\r\n          name='email'\r\n          type='email'\r\n          register={register}\r\n          label='Email'\r\n        />\r\n        <p style={{ color: 'red' }}>{errors.email?.message}</p>\r\n\r\n        <FormInput\r\n          name='password'\r\n          type='password'\r\n          register={register}\r\n          label='Password'\r\n        />\r\n        <p style={{ color: 'red' }}>{errors.password?.message}</p>\r\n\r\n        <div className='buttons'>\r\n          <CustomButton type='submit'>SIGN IN</CustomButton>\r\n          <CustomButton\r\n            type='button'\r\n            onClick={() => dispatch(googleSignInStart())}\r\n            isGoogleSignIn\r\n          >\r\n            Sign in with Google\r\n          </CustomButton>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"]},"metadata":{},"sourceType":"module"}